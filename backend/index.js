// Importa a fun√ß√£o respons√°vel por fazer o scraping da Amazon
import { scrapeAmazon } from "./scraper.js";

// Cria o servidor HTTP usando Bun
const server = Bun.serve({
  port: 3000, 

  // Fun√ß√£o que trata todas as requisi√ß√µes recebidas
  async fetch(req) {
    // Converte a URL da requisi√ß√£o para um objeto manipul√°vel
    const url = new URL(req.url); 

    // üîπ Define os cabe√ßalhos CORS para permitir requisi√ß√µes do frontend
    const corsHeaders = {
      "Access-Control-Allow-Origin": "*", // Permite acesso de qualquer origem
      "Access-Control-Allow-Methods": "GET, POST, OPTIONS", // M√©todos permitidos
      "Access-Control-Allow-Headers": "Content-Type", // Cabe√ßalhos permitidos
    };

    // üîπ Trata requisi√ß√µes do tipo OPTIONS (pr√©-flight), comuns em chamadas CORS
    if (req.method === "OPTIONS") {
      return new Response(null, { headers: corsHeaders }); // Retorna resposta vazia com os headers CORS
    }

    // üîπ Verifica se a rota √© /api/scrape e se o m√©todo √© GET
    if (url.pathname === "/api/scrape" && req.method === "GET") {
      const keyword = url.searchParams.get("keyword"); // Extrai o par√¢metro ?keyword da URL

      // üîπ Valida se o par√¢metro foi fornecido
      if (!keyword) {
        return new Response(
          JSON.stringify({ error: "Par√¢metro ?keyword √© obrigat√≥rio" }), 
          {
            status: 400, // C√≥digo de erro HTTP 400 (Bad Request)
            headers: { ...corsHeaders, "Content-Type": "application/json" }, // Cabe√ßalhos da resposta
          }
        );
      }

      try {
        // üîπ Chama a fun√ß√£o de scraping passando o termo de busca
        const results = await scrapeAmazon(keyword);

        // üîπ Retorna os dados extra√≠dos em formato JSON
        return new Response(JSON.stringify(results), {
          headers: { ...corsHeaders, "Content-Type": "application/json" },
        });
      } catch {
        // üîπ Em caso de erro no scraping, retorna erro 500
        return new Response(
          JSON.stringify({ error: "Erro ao extrair dados da Amazon" }),
          {
            status: 500, // C√≥digo de erro HTTP 500 (Internal Server Error)
            headers: { ...corsHeaders, "Content-Type": "application/json" },
          }
        );
      }
    }

    // üîπ Se a rota n√£o for reconhecida, retorna erro 404
    return new Response("Not Found", { status: 404, headers: corsHeaders });
  },
});

// Exibe no terminal que o backend est√° rodando
console.log(`‚úÖ Backend rodando em http://localhost:3000`);

